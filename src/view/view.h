/**
 * @file view.h
 * @brief Определения классов и структур для визуализации 3D моделей и
 * интерфейса.
 *
 * Этот файл содержит объявления класса `ModelRender`, который является виджетом
 * для отрисовки 3D модели с использованием OpenGL, и класса `View`, который
 * представляет собой интерфейс для взаимодействия с пользователем.
 *
 * Этот файл также включает в себя необходимые библиотеки Qt для взаимодействия
 * с графическим интерфейсом пользователя.
 */

#ifndef VIEW_H
#define VIEW_H

// Standard Libraries
#include <QOpenGLFunctions>
#include <QOpenGLWidget>
#include <vector>

// Qt Widgets
#include <QColor>
#include <QComboBox>
#include <QFileDialog>
#include <QGroupBox>
#include <QHBoxLayout>
#include <QImage>
#include <QLabel>
#include <QLineEdit>
#include <QMainWindow>
#include <QMap>
#include <QMenu>
#include <QMenuBar>
#include <QMessageBox>
#include <QPainter>
#include <QPushButton>
#include <QRadioButton>
#include <QSettings>
#include <QSlider>
#include <QVBoxLayout>

// Internal Modules
#include "../controller/axis.h"
#include "../controller/controller.h"
#include "ui_view.h"

QT_BEGIN_NAMESPACE
namespace Ui {
class View;
}
QT_END_NAMESPACE

namespace s21 {

/**
 * @struct Settings
 * @brief Структура для хранения настроек визуализации.
 *
 * Эта структура используется для хранения пользовательских настроек, таких как
 * цвета фона, цвета рёбер, размеры рёбер, вершин и другие параметры
 * отображения.
 */
struct Settings {
  QColor bg_color;              ///< Цвет фона
  QColor edges_color;           ///< Цвет рёбер
  QColor vertex_color;          ///< Цвет вершин
  int edges_size;               ///< Толщина рёбер
  int line_type;                ///< Тип линии (сплошная или пунктирная)
  int vertex_size;              ///< Размер вершин
  int vertex_shape;             ///< Форма вершин (круг, отсутствие или квадрат)
  bool is_parallel_projection;  ///< Тип проекции (параллельная или
                                ///< перспективная)
};

/**
 * @class ModelRender
 * @brief Виджет для отрисовки модели с использованием OpenGL.
 *
 * Класс предоставляет функциональность для отображения 3D модели, её настройки
 * и управление параметрами отображения через интерфейс пользователя.
 */
class ModelRender : public QOpenGLWidget, protected QOpenGLFunctions {
  Q_OBJECT

 public:
  /**
   * @brief Конструктор класса ModelRender.
   *
   * Инициализирует виджет для отрисовки, загружая настройки и устанавливая
   * начальные параметры.
   * @param parent Родительский виджет.
   */
  explicit ModelRender(QWidget* parent = nullptr);

  /**
   * @brief Деструктор класса ModelRender.
   *
   * Очищает ресурсы, связанные с OpenGL.
   */
  ~ModelRender();

  /**
   * @brief Устанавливает данные модели для отрисовки.
   *
   * Принимает вершины и индексы рёбер для отображения 3D модели.
   * @param vertices Список вершин модели.
   * @param faces Список рёбер модели.
   */
  void setModelData(const std::vector<float>& vertices,
                    const std::vector<unsigned int>& faces);

  /**
   * @brief Устанавливает цвет фона.
   *
   * Устанавливает цвет фона для рендеринга 3D сцены.
   * @param color Новый цвет фона.
   */
  void setBackgroundColor(const QColor& color);

  /**
   * @brief Устанавливает цвет рёбер.
   *
   * Устанавливает цвет для рёбер модели.
   * @param color Новый цвет рёбер.
   */
  void setEdgesColor(const QColor& color);

  /**
   * @brief Устанавливает тип линии.
   *
   * Устанавливает тип линии для рёбер модели (сплошная или пунктирная линия).
   * @param type Новый тип линии.
   */
  void setLineType(int type);

  /**
   * @brief Устанавливает толщину рёбер.
   *
   * Устанавливает толщину рёбер модели.
   * @param value Новая толщина рёбер.
   */
  void setLineThickness(const int value);

  /**
   * @brief Устанавливает размер вершин.
   *
   * Устанавливает размер вершин модели.
   * @param size Новый размер вершин.
   */
  void setVertexSize(int size);

  /**
   * @brief Устанавливает цвет вершин.
   *
   * Устанавливает цвет вершин модели.
   * @param color Новый цвет вершин.
   */
  void setVertexColor(const QColor& color);

  /**
   * @brief Устанавливает форму вершин.
   *
   * Устанавливает форму вершин модели (круг, ничего или квадрат).
   * @param shape Новая форма вершин.
   */
  void setVertexShape(int shape);

  /**
   * @brief Устанавливает тип проекции.
   *
   * Устанавливает тип проекции для рендеринга (параллельная или перспективная).
   * @param isParallel Новый тип проекции.
   */
  void setProjectionType(bool isParallel);

  /**
   * @brief Устанавливает стандартные настройки для рёбер.
   *
   * Метод сбрасывает настройки рёбер на значения по умолчанию: белый цвет
   * рёбер, тип линии — сплошная, размер рёбер — 1. После изменения настроек
   * сохраняет их и обновляет отображение.
   */
  void defaultEdgesSettings();

  /**
   * @brief Устанавливает стандартные настройки для вершин.
   *
   * Метод сбрасывает настройки вершин на значения по умолчанию: белый цвет
   * вершин, размер вершин — 5, форма вершин — круг. После изменения настроек
   * сохраняет их и обновляет отображение.
   */
  void defaultVerticesSettings();

  /**
   * @brief Получает список вершин модели.
   *
   * Метод возвращает вектор с координатами вершин модели.
   *
   * @return std::vector<float> Вектор с координатами вершин.
   */
  std::vector<float> GetVertices();

  /**
   * @brief Получает список индексов граней модели.
   *
   * Метод возвращает вектор с индексами граней (или треугольников), образующих
   * модель.
   *
   * @return std::vector<unsigned int> Вектор с индексами граней.
   */
  std::vector<unsigned int> GetFaces();

  /**
   * @brief Получает текущие настройки отображения.
   *
   * Метод возвращает ссылку на объект структуры `Settings`, содержащий текущие
   * настройки отображения.
   *
   * @return const Settings& Ссылка на структуру настроек.
   */
  const Settings& getSettings() const;

 protected:
  /**
   * @brief Инициализация OpenGL.
   *
   * Метод вызывается при инициализации OpenGL. Устанавливает начальные
   * параметры, такие как цвет фона и включение теста глубины.
   */
  void initializeGL() override;

  /**
   * @brief Изменение размера области отрисовки.
   *
   * Метод вызывается при изменении размера окна. Устанавливает новый размер
   * области отрисовки OpenGL.
   *
   * @param w Ширина новой области отрисовки.
   * @param h Высота новой области отрисовки.
   */
  void resizeGL(int w, int h) override;

  /**
   * @brief Отрисовка содержимого на экране.
   *
   * Метод вызывается для отрисовки содержимого окна. Он очищает буфер и
   * настраивает матрицу проекции, после чего вызывает методы для отрисовки
   * рёбер и точек модели.
   */
  void paintGL() override;

 private:
  /**
   * @brief Строит линии (рёбра) модели.
   *
   * Метод отрисовывает рёбра модели, используя настройки типа линии и размера.
   * Включает или выключает использование формы пунктира для линий в зависимости
   * от настроек.
   */
  void BuildLines();

  /**
   * @brief Строит точки (вершины) модели.
   *
   * Метод отрисовывает вершины модели в соответствии с их настройками, такими
   * как размер, цвет и форма.
   */
  void BuildPoints();

  /**
   * @brief Загружает настройки из конфигурации.
   *
   * Загружает настройки, такие как цвета, размеры и типы линий из
   * конфигурационного файла.
   */
  void loadSettings();

  /**
   * @brief Сохраняет текущие настройки в конфигурационный файл.
   *
   * Сохраняет текущие настройки отображения в конфигурационный файл.
   */
  void saveSettings() const;

  std::vector<float> vertices_;      ///< Вершины модели
  std::vector<unsigned int> faces_;  ///< Рёбра модели
  Settings settings_;  ///< Структура для хранения настроек отображения
  bool initialSettings = false;  ///< Проверка первого запуска программы для
                                 ///< создания файла настроек
};

/**
 * @class View
 * @brief Главный класс для отображения и управления 3D-моделями в графическом
 * интерфейсе.
 *
 * Класс `View` представляет основной графический интерфейс, включающий в себя
 * виджет для рендеринга 3D-моделей с использованием OpenGL, а также панели
 * управления для перемещения, масштабирования, вращения и других настроек
 * отображения модели. Он обрабатывает взаимодействие с пользователем и
 * синхронизирует изменения в интерфейсе с текущими настройками модели.
 */
class View : public QMainWindow {
  Q_OBJECT

 public:
  /**
   * @struct SliderState
   * @brief Структура, хранящая состояние всех слайдеров для управления
   * 3D-моделью.
   *
   * Эта структура используется для сохранения текущих значений перемещения,
   * вращения и масштаба модели. Каждое поле представляет собой значение для
   * соответствующего слайдера управления в интерфейсе. Инициализируется с
   * дефолтными значениями:
   * - перемещение (по осям X, Y, Z) = 0.0f
   * - вращение (по осям X, Y, Z) = 180.0f
   * - масштаб = 1.0f
   */
  struct SliderState {
    float move_x = 0.0f;      ///< Перемещение модели по оси X
    float move_y = 0.0f;      ///< Перемещение модели по оси Y
    float move_z = 0.0f;      ///< Перемещение модели по оси Z
    float rotate_x = 180.0f;  ///< Вращение модели вокруг оси X
    float rotate_y = 180.0f;  ///< Вращение модели вокруг оси Y
    float rotate_z = 180.0f;  ///< Вращение модели вокруг оси Z
    float scale = 1.0f;       ///< Масштаб модели
  };

  /**
   * @brief Конструктор класса View.
   *
   * Инициализирует основной интерфейс, устанавливает размеры окна, настраивает
   * меню, панели управления и создает виджет отображения модели.
   *
   * @param parent Родительский виджет (по умолчанию nullptr).
   */
  explicit View(QWidget* parent = nullptr);

  /**
   * @brief Деструктор класса View.
   *
   * Освобождает ресурсы, связанные с виджетами, такими как `modelViewWidget` и
   * интерфейс `ui`.
   */
  ~View();

  /**
   * @brief Получает виджет для отображения модели.
   *
   * Этот метод возвращает указатель на объект класса `ModelRender`, который
   * отвечает за рендеринг 3D-модели.
   *
   * @return Указатель на объект `ModelRender`, используемый для рендеринга
   * модели.
   */
  ModelRender* getModelRenderWidget();

  /**
   * @brief Сбрасывает все слайдеры к их значениям по умолчанию.
   *
   * Эта функция сбрасывает все слайдеры в интерфейсе к их значениям по
   * умолчанию, указанным в их свойствах. Слайдеры, у которых установлено
   * свойство "persistent" в значение false, будут сброшены к значениям по
   * умолчанию.
   */
  void resetSliders();

  /**
   * @brief Отображает сообщение об ошибке в случае возникновения проблемы.
   *
   * Эта функция вызывает окно с критическим сообщением об ошибке с заданным
   * текстом.
   *
   * @param error_message Сообщение об ошибке.
   */
  void ShowError(const std::string& error_message);

 signals:

  /**
   * @brief Сигнал, испускаемый при выборе пути к файлу модели.
   *
   * Этот сигнал испускается, когда пользователь выбирает файл модели.
   * Он передает путь к выбранному файлу.
   *
   * @param filePath Путь к выбранному файлу.
   */
  void filePathSelected(const QString& filePath);

  /**
   * @brief Сигнал, испускаемый при изменении значения слайдера для движения.
   *
   * Этот сигнал испускается, когда изменяется значение слайдера для перемещения
   * объекта вдоль одной из осей. Он передает изменение значения и ось, к
   * которой относится изменение.
   *
   * @param value Изменение значения слайдера.
   * @param axis Ось, по которой происходит движение.
   */
  void moveChanged(float value, Axis axis);

  /**
   * @brief Сигнал, испускаемый при изменении значения слайдера для вращения.
   *
   * Этот сигнал испускается, когда изменяется значение слайдера для вращения
   * объекта вокруг одной из осей. Он передает изменение значения и ось, к
   * которой относится вращение.
   *
   * @param value Изменение значения слайдера.
   * @param axis Ось, вокруг которой происходит вращение.
   */
  void rotateChanged(float value, Axis axis);

  /**
   * @brief Сигнал, испускаемый при изменении значения слайдера для масштаба.
   *
   * Этот сигнал испускается, когда изменяется значение слайдера для масштаба
   * объекта. Он передает изменение значения для масштабирования.
   *
   * @param value Изменение значения слайдера.
   */
  void scaleChanged(float value);

 private slots:

  /**
   * @brief Открывает диалог выбора файла для загрузки модели и обновляет
   * интерфейс информацией о модели.
   *
   * Эта функция открывает диалог QFileDialog для выбора файла модели (.obj).
   * Если файл выбран, обновляется виджет модели с выбранным файлом, а состояние
   * слайдеров сбрасывается к значениям по умолчанию. Также обновляется
   * отображаемая информация о модели, такая как количество вершин и рёбер.
   */
  void OnOpenFile();

  /**
   * @brief Сохраняет текущий вид как изображение в указанное место.
   *
   * Эта функция открывает диалог QFileDialog для выбора расположения и формата
   * файла (BMP или JPEG). Она захватывает текущий кадр с виджета модели и
   * сохраняет его как изображение по указанному пути. В случае неудачи
   * отображается сообщение с предупреждением.
   */
  void OnSaveImage();

  /**
   * @brief Сохраняет текущий вид как GIF в указанное место.
   *
   * Эта функция открывает диалог QFileDialog для выбора местоположения и имени
   * файла для сохранения GIF. Она захватывает 50 кадров с виджета модели,
   * масштабирует их и сохраняет как GIF файл. Если создание GIF не удалось,
   * отображается сообщение об ошибке.
   */
  void OnSaveGIF();

 private:
  /**
   * @brief Загружает и отображает окно отрисовки в виджете ModelRender.
   *
   * Создаёт виджет для рендеринга 3D-модели, устанавливает минимальный размер и
   * отображает информационную метку.
   */
  void LoadModel();

  /**
   * @brief Создаёт и отображает панели управления для различных операций с
   * моделью.
   *
   * Создаёт и размещает на экране панели управления, такие как перемещение,
   * масштабирование, вращение, а также панели для настройки рёбер, вершин и
   * проекции модели.
   */
  void RenderControlPanels();

  /**
   * @brief Настроивает меню с пунктами для открытия, сохранения и выхода.
   *
   * Создаёт строку меню с пунктами для работы с файлами: открыть файл,
   * сохранить изображение, сохранить в формате GIF, а также выход из
   * приложения.
   */
  void SetupMenuBar();

  /**
   * @brief Создает и настраивает слайдер для управления значениями.
   *
   * Этот метод создает горизонтальный слайдер с заданным стилем и возвращает
   * указатель на него. Стиль слайдера настроен для изменения внешнего вида,
   * включая цвет дорожки и ручки слайдера.
   *
   * @return Указатель на созданный и настроенный слайдер.
   */
  QSlider* SliderDesign();
  /**
   * @brief Создает виджет слайдера и поля ввода для контроля значений.
   *
   * Этот метод создает контейнерный виджет, который содержит слайдер и поле
   * ввода для отображения текущего значения слайдера. Также устанавливает связи
   * для синхронизации значений между слайдером и полем ввода. Поле ввода
   * позволяет вводить числовые значения вручную.
   *
   * @param label Название слайдера.
   * @param min Минимальное значение слайдера.
   * @param max Максимальное значение слайдера.
   * @param defaultValue Значение по умолчанию.
   * @return Указатель на созданный виджет слайдера и поля ввода.
   */
  QWidget* createSliderWithInput(const QString& label, int min, int max,
                                 int defaultValue);

  /**
   * @brief Создает панель для управления перемещением модели.
   *
   * Этот метод создает и возвращает панель с слайдерами для управления
   * перемещением модели по осям X, Y и Z. Каждому слайдеру присваиваются
   * диапазоны от -100 до 100 и значение по умолчанию 0.
   *
   * @return Указатель на созданную панель с слайдерами для перемещения.
   */
  QGroupBox* MovePanel();

  /**
   * @brief Создает панель для управления масштабом модели.
   *
   * Этот метод создает панель с одним слайдером для управления масштабом
   * модели. Диапазон слайдера установлен от 1 до 20, а значение по умолчанию
   * — 1.
   *
   * @return Указатель на созданную панель с слайдером для масштаба.
   */
  QGroupBox* ScalePanel();

  /**
   * @brief Создает панель для управления вращением модели.
   *
   * Этот метод создает панель с тремя слайдерами для управления вращением
   * модели вокруг осей X, Y и Z. Диапазон вращения установлен от 0 до 360
   * градусов, а значения по умолчанию — 180 градусов.
   *
   * @return Указатель на созданную панель с слайдерами для вращения.
   */
  QGroupBox* RotatePanel();

  /**
   * @brief Синхронизирует интерфейс с текущими настройками.
   *
   * Этот метод обновляет элементы интерфейса (цвет, толщину линий, тип проекции
   * и т.д.) в соответствии с текущими настройками, хранимыми в модели. Он
   * проверяет и обновляет все соответствующие элементы управления.
   */
  void syncInterfaceWithSettings();

  /**
   * @brief Сбрасывает настройки линий к значениям по умолчанию.
   *
   * Этот метод сбрасывает все настройки панели линий, включая толщину, цвет и
   * тип линии, и восстанавливает значения по умолчанию. Также вызывает метод
   * сброса на виджете модели.
   */
  void resetEdgesSettings();

  /**
   * @brief Сбрасывает настройки вершин к значениям по умолчанию.
   *
   * Этот метод сбрасывает все настройки для вершин, включая их размер, цвет и
   * форму, и восстанавливает значения по умолчанию. Также вызывает метод сброса
   * на виджете модели.
   */
  void resetVerticesSettings();

  /**
   * @brief Создает панель для настройки линий.
   *
   * Этот метод создает групповую панель с двумя секциями: одна для толщины
   * линии и цвета, другая — для выбора типа линии и кнопки сброса настроек.
   *
   * @return Указатель на созданную панель для настройки линий.
   */
  QGroupBox* EdgesPanel();

  /**
   * @brief Создает панель для настройки вершин.
   *
   * Этот метод создает групповую панель с двумя секциями: одна для размера и
   * цвета вершин, другая — для выбора формы вершины и кнопки сброса настроек.
   *
   * @return Указатель на созданную панель для настройки вершин.
   */
  QGroupBox* VerticesPanel();

  /**
   * @brief Создает панель для выбора цвета фона.
   *
   * Эта панель включает выпадающий список, с помощью которого пользователь
   * может выбрать один из доступных цветов фона: Черный, Зеленый, Синий,
   * Красный и Белый. При изменении цвета фона вызывается слот
   * SetBackgroundColor, который обновляет фон в модели.
   *
   * @return QGroupBox* Панель с элементами для выбора цвета фона.
   */
  QGroupBox* BackPanel();

  /**
   * @brief Создает панель для выбора типа проекции.
   *
   * Панель содержит радиокнопки для выбора между параллельной и центральной
   * проекцией. По умолчанию активируется параллельная проекция. При изменении
   * типа проекции вызывается слот OnProjectionTypeChanged, который обновляет
   * тип проекции в модели.
   *
   * @return QWidget* Панель с радиокнопками для выбора типа проекции.
   */
  QWidget* ProjectionPanel();

  /**
   * @brief Устанавливает цвет фона в модели и обновляет выпадающий список.
   *
   * Этот метод обновляет цвет фона в виджете модели и синхронизирует выбранный
   * цвет в выпадающем списке с текущим состоянием.
   *
   * @param color Цвет, который должен быть установлен как фон.
   */
  void SetBackgroundColor(const QString& color);

  /**
   * @brief Обработчик изменения цвета для вершин.
   *
   * Этот метод вызывается при изменении цвета вершин в интерфейсе. Он обновляет
   * цвет на модели и синхронизирует выбор цвета в выпадающем списке с текущим
   * значением.
   *
   * @param color Новый выбранный цвет.
   */
  void OnEdgesColor(const QString& color);

  /**
   * @brief Обработчик изменения типа линии.
   *
   * Этот метод вызывается при изменении типа линии в интерфейсе. Он обновляет
   * тип линии на модели.
   *
   * @param type Новый выбранный тип линии (сплошная или пунктирная).
   */
  void OnLineTypeChanged(const QString& type);

  /**
   * @brief Обработчик изменения толщины линии.
   *
   * Этот метод вызывается при изменении толщины линии в интерфейсе. Он
   * обновляет толщину линии на модели и синхронизирует слайдер с текущим
   * значением.
   *
   * @param value Новая толщина линии.
   */
  void OnLineThickness(int value);

  /**
   * @brief Обработчик изменения размера вершины.
   *
   * Этот метод вызывается при изменении размера вершины в интерфейсе. Он
   * обновляет размер вершины на модели.
   *
   * @param size Новый выбранный размер вершины.
   */
  void OnVertexSizeChanged(int size);

  /**
   * @brief Обработчик изменения цвета вершины.
   *
   * Этот метод вызывается при изменении цвета вершины в интерфейсе. Он
   * обновляет цвет на модели и синхронизирует выбор цвета в выпадающем списке с
   * текущим значением.
   *
   * @param color Новый выбранный цвет.
   */
  void OnVertexColorChanged(const QString& color);

  /**
   * @brief Обработчик изменения формы вершины.
   *
   * Этот метод вызывается при изменении формы вершины в интерфейсе. Он
   * обновляет форму вершины на модели.
   *
   * @param shape Новая форма вершины (круг, квадрат, ничего).
   */
  void OnVertexShapeChanged(const QString& shape);

  /**
   * @brief Обрабатывает изменение типа проекции.
   *
   * Этот метод вызывается при изменении состояния радиокнопок выбора проекции.
   * Он обновляет тип проекции в модели в зависимости от выбранной опции:
   * параллельная или центральная проекция.
   */
  void OnProjectionTypeChanged();

  /**
   * @brief Соединяет слайдер с сигналом изменения, передавая изменения значения
   * в соответствующий метод.
   *
   * Эта функция подключает слайдер к соответствующему сигналу, который
   * отправляет изменения значения в зависимости от оси (движение, вращение или
   * масштабирование) с обновлением предыдущего состояния слайдера.
   *
   * @param widget Виджет слайдера.
   * @param axis Ось, для которой происходит подключение слайдера.
   */
  void connectSliderToSignal(QWidget* widget, Axis axis);

  /**
   * @brief Создает правую часть панели для настройки линий.
   *
   * Этот метод создает вертикальный макет с элементами управления для типа
   * линии и кнопкой сброса настроек. Включает выпадающий список для выбора типа
   * линии (сплошная или пунктирная) и кнопку для сброса настроек.
   *
   * @return Указатель на созданный макет для правой части панели.
   */
  QVBoxLayout* createEdgesRightLayout();

  /**
   * @brief Создает левую часть панели для настройки линий.
   *
   * Этот метод создает вертикальный макет с элементами управления для толщины
   * линии и цвета. Включает слайдер для изменения толщины линии и выпадающий
   * список для выбора цвета.
   *
   * @return Указатель на созданный макет для левой части панели.
   */
  QVBoxLayout* createEdgesLeftLayout();

  /**
   * @brief Создает левую часть панели для настройки вершин.
   *
   * Этот метод создает вертикальный макет с элементами управления для размера
   * вершин и их цвета. Включает слайдер для изменения размера вершины и
   * выпадающий список для выбора цвета.
   *
   * @return Указатель на созданный макет для левой части панели.
   */
  QVBoxLayout* createVertexLeftLayout();

  /**
   * @brief Создает правую часть панели для настройки вершин.
   *
   * Этот метод создает вертикальный макет с элементами управления для выбора
   * формы вершины и кнопкой для сброса настроек.
   *
   * @return Указатель на созданный макет для правой части панели.
   */
  QVBoxLayout* createVertexRightLayout();

  Ui::View* ui;  ///< Указатель на объект пользовательского интерфейса
  ModelRender* modelViewWidget =
      nullptr;  ///< Указатель на виджет для рендеринга модели
  QLabel* infoLabel_ =
      nullptr;  ///< Указатель на метку для отображения информации о модели
  SliderState previous_slider_state_;  ///< Структура для хранения предыдущего
                                       ///< состояния слайдеров
  static const QMap<QString, QColor>
      colorMap;  ///< Словарь, связывающий строки с цветами для использования в
                 ///< интерфейсе
  static const QMap<QString, int>
      lineTypeMap;  ///< Словарь, связывающий строки с типами линий (сплошная
                    ///< или пунктирная)
  static const QMap<QString, int>
      vertexShapeMap;  ///< Словарь, связывающий строки с типами форм вершин
  static const QMap<QString, bool>
      projectionTypeMap;  ///< Словарь для отображения типов проекций
};

}  // namespace s21
#endif  // VIEW_H
