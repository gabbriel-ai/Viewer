/**
 * @file parser.h
 * @brief Заголовочный файл для класса парсера, отвечающего за загрузку и
 * обработку данных объекта из файла.
 *
 * Этот файл описывает структуру данных и класс парсера, который загружает
 * объектные данные (вершины и грани) из файла, выполняет их парсинг и
 * предоставляет доступ к этим данным. Класс `Parser` выполняет следующие
 * функции:
 * - Загрузка данных из файла.
 * - Парсинг данных (вершин и граней).
 * - Валидация данных для проверки корректности.
 *
 * Данные объекта хранятся в структуре `ObjectData`, которая содержит два
 * вектора: `faces` для граней и `vertices` для вершин.
 *
 * Этот файл предоставляет интерфейс для загрузки, чтения и получения данных
 * объекта, а также для их валидации.
 */

#ifndef __PARSER__H__
#define __PARSER__H__
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
namespace s21 {

/**
 * Структура, содержащая данные объектного файла
 */

struct ObjectData {
  std::vector<unsigned int> faces{};
  std::vector<float> vertices{};
};

/**
 * Класс, создающий экземпляр класса, который содержит данные объектного файла
 */

class Parser {
 private:
  ObjectData data_{};  ///< Данные объекта

 public:
  /**
   * Конструктор по умолчанию
   */
  Parser() = default;

  /**
   * @brief Загружает файл по указанному пути
   *
   * Если файл не удаётся загрузить по какой-либо причине,
   * загружает предыдущие данные и выбрасывает исключение.
   *
   * @param path Путь к файлу
   */

  void LoadFile(const std::string& path);

  /**
   * @brief Возвращает текущие данные
   *
   * Возвращает текущие данные парсера.
   *
   * @return Константная ссылка на объект `ObjectData`
   */

  const ObjectData& GetData();

 private:
  /**
   * @brief Читает данные из файла по пути
   *
   * Открывает поток для указанного пути и начинает парсить данные.
   *
   * @param path Путь к файлу
   */
  void ReadData(const std::string& path);

  /**
   * @brief Читает строки в потоке и резервирует пространство для векторов
   *
   * Читает строки в потоке по одной и подсчитывает все данные.
   * Затем резервирует пространство для векторов в объектных данных.
   * Возвращает поток в начало и очищает все флаги ошибок.
   *
   * @param stream Входной поток
   */
  void ReserveSpace(std::ifstream& in);

  /**
   * @brief Парсит вершины
   *
   * Загружает строку с вершинами в объектные данные.
   *
   * @param line Строка с вершинами
   */

  void ParseVertex(const std::string& line);

  /**
   * @brief Парсит грани
   *
   * Загружает строку с гранями в объектные данные.
   * "1, 2, 3" -> {0, 1, 1, 2, 2, 0}
   *
   * @param line Строка с гранями
   */
  void ParseFaces(const std::string& line);

  /**
   * @brief Валидация данных
   *
   * Простой проверочный механизм, есть ли в данных грань, указывающая на
   * несуществующую вершину.
   *
   * @throws std::logic_error Если данные некорректны
   */

  void ValidationData();
};

}  // namespace s21

#endif