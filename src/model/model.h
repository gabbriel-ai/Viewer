/**
 * @file model.h
 * @brief Заголовочный файл для класса Model.
 *
 * В этом файле определен класс Model. Этот класс управляет хранением данных
 * о вершинах и гранях объекта, а также выполняет операции трансформации, такие
 * как перемещение, масштабирование и вращение.
 *
 * Класс Model также обрабатывает загрузку данных модели из файла с помощью
 * парсера и вычисляет размеры модели, включая её ограничивающий прямоугольник
 * (bounding box).
 *
 * Паттерны проектирования:
 * - **Мост (Bridge):** Отделение логики трансформаций (AffineTransform) от
 * класса Model, что позволяет легко расширять трансформации без изменения
 * самого класса модели.
 * - **Фасад (Facade):** Метод LoadFile предоставляет упрощённый интерфейс для
 * загрузки модели, скрывая подробности работы с парсером и трансформациями.
 */
#ifndef MODEL_H_
#define MODEL_H_

#include "affine_transform/affinetransform.h"
#include "parser/parser.h"

namespace s21 {
class Model {
 public:
  /**
   * @brief Конструктор по умолчанию для класса Model.
   *
   * Этот конструктор инициализирует объекты парсера (`parser_`) и
   * трансформатора (`affine_transform_`), которые будут использоваться для
   * загрузки данных модели и выполнения трансформаций.
   *
   * Конструктор не принимает аргументов и не выполняет дополнительных операций,
   * кроме инициализации этих компонентов.
   */
  Model();

  /**
   * @brief Деструктор для класса Model.
   *
   * Здесь деструктор оставлен пустым, так как он не требует особых действий для
   * очистки.
   */
  ~Model();

  /**
   * @brief Загрузка модели из файла.
   *
   * Загружает данные из файла, используя парсер, и применяет трансформации для
   * размещения объекта в корректной системе координат.
   *
   * @param path Путь к файлу с моделью.
   * @return Пара, содержащая успешность операции и сообщение об ошибке (если
   * таковая имела место).
   */
  std::pair<bool, std::string> LoadFile(const std::string &path);

  /**
   * @brief Получение вершин модели.
   *
   * @return Ссылка на вектор с вершинами модели.
   */
  const std::vector<float> &GetVertices() const;

  /**
   * @brief Получение граней модели.
   *
   * @return Ссылка на вектор с гранями модели.
   */
  const std::vector<unsigned int> &GetFaces() const;

  /**
   * @brief Применение трансформаций к модели.
   *
   * Изменяет положение, ориентацию и масштаб модели в соответствии с
   * переданными параметрами.
   *
   * @param delta Параметры трансформации.
   */
  void Transform(TransformParametrs &delta);

  /**
   * @brief Вычисление ограничивающего прямоугольника для модели.
   *
   * Находит минимальные и максимальные координаты по осям X, Y и Z для всех
   * вершин модели.
   *
   * @param min_x Минимальное значение X.
   * @param min_y Минимальное значение Y.
   * @param min_z Минимальное значение Z.
   * @param max_x Максимальное значение X.
   * @param max_y Максимальное значение Y.
   * @param max_z Максимальное значение Z.
   */
  void CalculateBoundingBox(float &min_x, float &min_y, float &min_z,
                            float &max_x, float &max_y, float &max_z);

  /**
   * @brief Сброс трансформации модели.
   *
   * Восстанавливает модель в исходное состояние, нормализуя её размер и
   * центрируя её в системе координат.
   */
  void ResetTransform();

 private:
  ObjectData object_data_;  ///< Хранение данных объекта (вершины и грани).
  s21::Parser parser_;      ///< Парсер для загрузки модели.
  s21::AffineTransform
      affine_transform_;              ///< Объект для выполнения трансформаций.
  TransformParametrs current_state_;  ///< Текущее состояние трансформаций.
};
}  // namespace s21

#endif  // MODEL_H_